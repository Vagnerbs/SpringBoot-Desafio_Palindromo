package com.vagnersilva.palindromo.resources;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.vagnersilva.palindromo.domain.Matriz;
import com.vagnersilva.palindromo.services.MatrizService;

@RestController
@RequestMapping(value = "/matrizes")
public class MatrizResource {
	
	@Autowired
	private MatrizService service;
	
	@RequestMapping(method = RequestMethod.GET)
	public ResponseEntity<List<Matriz>> findAll(){
		
		List<Matriz> list = service.findAll();
		System.out.println(list);
		return ResponseEntity.ok().body(list);
		
	}
	
	@RequestMapping(value = "/resposta", method = RequestMethod.GET)
	public ResponseEntity<List<String>> getPalindromes(){
		List<String> palindromes = service.getPalindromes();
		System.out.println(palindromes);
		return ResponseEntity.ok().body(palindromes);
	}


	@RequestMapping(value = "/resposta", method = RequestMethod.POST)
	public ResponseEntity<Set<String>> findAndSavePalindromes(){
	    
	    List<Matriz> list = service.findAll();
	    Set<String> palindromes = new HashSet<>();

	    for (Matriz matriz : list) {
	        String[][] grid = matriz.getMatriz();
	        for (int i = 0; i < grid.length; i++) {
	            for (int j = 0; j < grid[i].length; j++) {
	                for (int[] direction : new int[][] {{0, 1}, {1, 0}, {1, 1}, {0, -1}, {-1, 0}, {-1, -1}, {1, -1}, {-1, 1}}) { // Direções: horizontal, vertical e diagonal
	                    String word = "";
	                    for (int k = 0; k < 5; k++) {
	                        int x = i + direction[0] * k;
	                        int y = j + direction[1] * k;
	                        if (x >= 0 && x < grid.length && y >= 0 && y < grid[i].length) {
	                            word += grid[x][y];
	                            if (word.length() >= 4 && isPalindrome(word)) {
	                                System.out.println("Encontrado um palíndromo: " + word);
	                                palindromes.add(word);
	                            }
	                        }
	                    }

	                }
	            }
	        }
	    }

	    service.savePalindromes(new ArrayList<>(palindromes)); // Salva os palíndromos no banco de dados

	    return ResponseEntity.ok().body(palindromes);
	    
	}
	
	private boolean isPalindrome(String word) {
		int i = 0, j = word.length() - 1; 

        while (i < j) { 
            if (word.charAt(i) != word.charAt(j)) 
                return false; 
            i++; 
            j--; 
        } 

        return true;
	}
}
