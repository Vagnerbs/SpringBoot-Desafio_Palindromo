package com.vagnersilva.palindromo.services;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.vagnersilva.palindromo.domain.Matriz;
import com.vagnersilva.palindromo.domain.Palindrome;
import com.vagnersilva.palindromo.repository.MatrizRepository;
import com.vagnersilva.palindromo.repository.PalindromeRepository;

@Service
public class MatrizService {
	
	// Injeção das interfaces MatrizRepository e PalindromeRepository
	@Autowired
	private MatrizRepository repo;
	@Autowired
	private PalindromeRepository palindromeRepo;
	
	// Método para buscar todas as matrizes no Banco de Dados
	public List<Matriz> findAll(){
		return repo.findAll();
	}
	
    // Método para encontrar e salvar palíndromos
    public Set<String> encontrarESalvarPalindromos(){
        Set<String> palindromos = new HashSet<>();
        for (Matriz matriz : findAll()) {
            String[][] matrizValores = matriz.getMatriz();
            // Encontrar palíndromos na horizontal, vertical e diagonal
            encontrarHorizontal(matrizValores, palindromos);
            encontrarVertical(matrizValores, palindromos);
            encontrarDiagonal(matrizValores, palindromos);
        }
        // Salvar os palíndromos encontrados no banco de dados
        savarPalindromos(new ArrayList<>(palindromos));
        return palindromos; 
    }

    // Método privado para encontrar palíndromos na horizontal em uma matriz de valores
    private void encontrarHorizontal(String[][] matrizValores, Set<String> palindromos) {
        for (int i = 0; i < matrizValores.length; i++) {
            verificarSequencia(matrizValores[i], palindromos);
        }
    }

    // Método privado para encontrar palíndromos na vertical em uma matriz de valores
    private void encontrarVertical(String[][] matrizValores, Set<String> palindromos) {
        for (int i = 0; i < matrizValores[0].length; i++) {
            String[] coluna = new String[matrizValores.length];
            for (int j = 0; j < matrizValores.length; j++) {
                coluna[j] = matrizValores[j][i];
            }
            verificarSequencia(coluna, palindromos);
        }
    }

    // Método privado para encontrar palíndromos na diagonal em uma matriz de valores
    private void encontrarDiagonal(String[][] matrizValores, Set<String> palindromos) {
        // Diagonal principal e abaixo
        for (int i = 0; i < matrizValores.length; i++) {
            for (int j = 0, x = i; x < matrizValores.length; j++, x++) {
                String sequencia = "";
                // Percorre a diagonal principal e abaixo
                for (int y = x, z = j; y < matrizValores.length && z < matrizValores[0].length; y++, z++) {
                    sequencia += matrizValores[y][z];
                    verificarSequencia(sequencia, palindromos);
                }
            }
        }

        // Diagonal principal e acima
        for (int i = 1; i < matrizValores[0].length; i++) {
            for (int j = 0, x = i; x < matrizValores[0].length; j++, x++) {
                String sequencia = "";
                // Percorre a diagonal principal e acima
                for (int y = j, z = x; y < matrizValores.length && z < matrizValores[0].length; y++, z++) {
                    sequencia += matrizValores[y][z];
                    verificarSequencia(sequencia, palindromos);
                }
            }
        }

        // Diagonal secundária e abaixo
        for (int i = 0; i < matrizValores.length; i++) {
            for (int x = i, z = 0; x >= 0 ; x--, z++) {
                String sequencia = "";
                // Percorre a diagonal secundária e abaixo
                for (int y = x, w = z ; y >= 0 && w < matrizValores[0].length ; y--, w++) {
                    sequencia += matrizValores[y][w];
                    verificarSequencia(sequencia, palindromos);
                }
            }
        }
    }

    // Método privado para verificar se uma sequência é um palíndromo e adicioná-la ao conjunto de palíndromos
    private void verificarSequencia(String sequencia, Set<String> palindromos) {
        if (sequencia.length() >= 4 && isPalindromo(sequencia)) {
            palindromos.add(sequencia);
        }
    }

    // Método privado para verificar se uma string é um palíndromo.
    private boolean isPalindromo(String str) {
        // Define o início da string
        int inicio = 0;
        // Define o fim da string
        int fim = str.length() - 1;
        // Enquanto o início for menor que o fim...
        while (inicio < fim) {
            // Se os caracteres nas posições início e fim forem diferentes, retorna falso.
            if (str.charAt(inicio) != str.charAt(fim)) {
                return false;
            }
            // Incrementa o início e decrementa o fim.
            inicio++;
            fim--;
        }
        // Se todos os caracteres correspondentes forem iguais, retorna verdadeiro.
        return true;
    }
  
    //=============================================Tratar os Palindromos=========================================
    
	// Método para buscar todos os palíndromos.
	public List<String> getPalindromes() {
		// Busca todos os palíndromos no repositório e converte para uma lista de strings.
		List<Palindrome> palindromos = palindromeRepo.findAll();
		return palindromos.stream().map(Palindrome::getValue).collect(Collectors.toList());
	}



	// Método para salvar palíndromos no banco de dados.
	public void savarPalindromos(List<String> listaPalindromos) {
	    // Converte a lista de palíndromos para um conjunto para remover duplicatas.
	    Set<String> conjuntoPalindromos = new HashSet<>(listaPalindromos);
	    for (String palindrome : conjuntoPalindromos) {
	        // Cria um novo objeto Palindrome e define seu valor.
	        Palindrome novoPalindrome = new Palindrome();
	        novoPalindrome.setValue(palindrome);
	        // Salva o novo objeto Palindrome no repositório.
	        palindromeRepo.save(novoPalindrome);
	    }
	}
}
